import util


def search(word):
    data = util.all_word_pairs()
    return data


def merge_pairs(data):
    result = data[:]

    if len(result) <= 1:
        return result
    else:
        res = []
        fst = merge_pairs(result[:(len(result) // 2)])
        snd = merge_pairs(result[(len(result) // 2):])
        fi = 0
        si = 0
        while fi < len(fst) and si < len(snd):
            if (fst[fi][0] < snd[si][0] or (fst[fi][0] == snd[si][0] and fst[fi][1] < snd[si][1])):
                res.append(fst[fi])
                fi = fi + 1
            else:
                res.append(snd[si])
                si = si + 1
        if (fi < len(fst)):
            res.extend(fst[fi:])
        else:
            res.extend(snd[si:])
        return res


# noinspection PyUnreachableCode
def remove_dups(data):
    res = []
    if len(data) != 0:
        fresh = data[0]
        i = 1
        while i < len(data):
            if data[i] != fresh:
                res.append(fresh)
                fresh = data[i]
            i = i + 1
        res.append(fresh)
    return res


def make_table(pairs):
    res = []


def search_array(array, value):
    for x in array:

        if x == value:
            return 1
        return 0


def search_engine(word):
    a = []
    b = []
    x = word
    a.append(x)
    y = util.all_word_pairs()
    if x in y:
        b.append(y)
        a.append(b)

    return a
